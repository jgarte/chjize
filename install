#!/bin/bash

# *** This has been auto-generated from README.md by rules/install ***

set -eu
set -x

apt-get update
apt-get install -y git make gnupg
cd /opt/
mkdir chj
cd chj
git clone https://github.com/pflanze/chjize.git
cd chjize/

gpg --import cj-key.asc
version=r`git tag -l | grep ^r | sed s/^r// | LANG=C sort -rn | head -1`
git checkout "$version"
git tag -v "$version"
# Check that the above command says "Good signature", and shows
#   my fingerprint (A54A1D7CA1F94C866AC81A1F0FA5B21104EDB072, feel 
#   free to google it) if you don't have a trust path to the key.
# You can also do the more paranoid verification of running the
#   script lines shown by the above command (the lines starting
#   with a `$`), and verifying that you get the same output as shown.

set +x
echo -n 'Ready. '

cat <<'END'
Run:
    
    make help

for the list of available targets (the same as shown
[below](#current-list-of-targets)). To e.g. only install my software
into `/opt/chj` (and dependences, see `Makefile` or the
[graph](#graph-of-target-dependencies) below), run:

    make chj

Unlike Ansible, this caches which actions were already done, and is
thus more efficient when asking the same target repeatedly (even
across runs). If an action for some reason really should be re-run,
unlink the file with the same name as the target.

May work with parallel builds (`-j2` etc.), since we're now using
wrappers around `apt-get` and `apt` (in [bin/](bin/)) that use waiting
locks.
END
