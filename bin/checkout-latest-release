#!/bin/bash

set -euo pipefail
IFS=

source /opt/chj/chjize/lib/chj-env.bash

usage () {
    echo "usage: $0 [-v] [-p pattern] ['>'|'>=' mintagname]"
    echo
    echo "  check out latest (well, highest-numbered) release tag."
    echo "  If '>' or '>=' and mintagname are given, die unless a tag with"
    echo "  higher version number is found."
    echo
    echo "  Options:"
    echo "     -v           run verify-sig and git-tag-hashed (default)"
    echo "     -V           do not run verify-sig nor git-tag-hashed"
    echo "     -p pattern   pattern to use with perl for tag selection,"
    echo "                    must capture the version number, of which"
    echo "                    the part before an optional dot is sorted"
    echo "                    numerically, the part after lexically;"
    echo "                    default: '$pattern'"
    echo
    exit 1
}

do_verify=yes
pattern='^[rv](\d+(?:\.\d+)*)$'
maybe_ge_gt=
maybe_mintagname=

while [ "${#@}" -gt 0 ]; do
    case "$1" in
        -v)
        shift
        do_verify=yes
        ;;
        -V)
        shift
        do_verify=no
        ;;
        -p)
        shift
        pattern="$1"
        shift
        ;;
        '>'|'>=')
        maybe_ge_gt="$1"
        shift
        maybe_mintagname="$1"
        shift
        ;;
        *)
        usage
        ;;
    esac
done


export pattern maybe_ge_gt maybe_mintagname
ver=$(git tag -l | perl -we 'use strict; use warnings FATAL => "uninitialized";

    my $pattern= $ENV{pattern};
    my $maybe_ge_gt= $ENV{maybe_ge_gt};
    my $mintagname= $ENV{maybe_mintagname};

    my @v0;
    while(<STDIN>) {
        chomp;
        push @v0, [$_, $1 // die "pattern /$pattern/ does not capture anything for: '\''$_'\''" ] 
            if /$pattern/;
    }

    @v0 or die "no tags matching /$pattern/ found";

    sub vparse {
        my ($v)=@_;
        my ($pre,$post)= $v=~ /^(\d+)(?:\.(.*))?$/s
            or die "invalid version number, does not start with digits and optionally a dot and string: '\''$v'\''";
        [$pre, $post//""]
    }

    sub vcmp {
        my ($a,$b)=@_;
        my $A= vparse $a;
        my $B= vparse $b;
        $$A[0] <=> $$B[0] or $$A[1] cmp $$B[1]
    }

    my @v= do {
        if ($maybe_ge_gt) {
            my ($mintagversion)= $mintagname=~ /$pattern/
                or die "mintagname \"$mintagname\" does not match pattern \"$pattern\"";
            my $mincmpok= $maybe_ge_gt eq ">" ? 1 
                        : $maybe_ge_gt eq ">=" ? 0
                        : die "bug";
            grep { vcmp($$_[1], $mintagversion) >= $mincmpok } @v0
        } else {
            @v0
        }
    };

    @v or die "no tags $maybe_ge_gt $mintagname found";

    print((sort { vcmp $$a[1], $$b[1] } @v)[-1][0]) or die $!

')

#echo "do_verify=$do_verify, pattern='$pattern'"
#echo "ver='$ver'";

git checkout master || true  # so that branch -D can work below

# Could create a branch, but then how to handle existing ones?:
#   git branch -D _"$ver" || true
#   git checkout -b _"$ver" "$ver"
#
# Or, just check out without a name:
#git checkout "$ver"
#
# Or, generate random name:
randomid=`(base64 < /dev/urandom || true) | head -c 20 | tr /+ XX`
git checkout -b "${ver}_${randomid}" "$ver"

if [[ $do_verify = yes ]]; then
    verify-sig --require-accept-keys "$ver"
    git-tag-hashed "$ver"
fi

